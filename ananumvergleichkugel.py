# -*- coding: utf-8 -*-
"""
Spyder Editor

Dies ist eine temporäre Skriptdatei.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.special import gamma
from scipy.special import jve
from scipy.special import spherical_in

def D(r,u,s,w):
    x = np.sqrt((1j*w*u*s))*r
    D = ((2*u+1)*x-((2*u+1)+x**2)*np.tanh(x))/(((u-1)*x+((1-u)+x**2)*np.tanh(x)))
    return D

def H(rl,I,z,N):
    H = (N*I*rl**2)/(2*(rl**2+z**2)**(3/2))
    return H

def Dipol(s,r,u,u2,w,R,Q,H,D):
    E = 1j*(w*u*1/2*H*R*np.sin(Q)+w*u2/2*H*r**3*R**(-2)*np.sin(Q)*D)
    return E

def Dipol2(s,r,u,u2,w,R,Q,H,D):
    E = 1j*w*u2/2*H*r**3*R**(-2)*np.sin(Q)*D
    return E

def Dipol3(s,r,u,w,R,Q,B,D):
    E = 1j*w/2*B*r**3*R**(-2)*np.sin(Q)*D
    return E

def Primaer(s,r,u,w,R,Q,B,D):
    E = 1j*w*1/2*B*R*np.sin(Q)
    return E

def Multipol4(s,u,w,u2,I,Q,r,R):
    k = np.sqrt(1j*s*u*w)
    E_m = -1j*w*u2*I/2*(((np.sin(Q)/2*(r/R)**3*(-np.sin(Q))**2*(jve(1+3/2,1j*k*r)/jve(1-1/2,1j*k*r))))
            +(np.sin(Q)/6*(r/R)**5*(-3*np.sin(Q)*np.cos(Q))**2*(jve(2+3/2,1j*k*r)/jve(2-1/2,1j*k*r)))
            +np.sin(Q)/12*(r/R)**7*(3/2*(1-(np.cos(Q))**2)**(1/2)*(5*(np.cos(Q))**2-1))**2*(jve(3+3/2,1j*k*r)/jve(3-1/2,1j*k*r))
            +np.sin(Q)/20*(r/R)**9*(5/2*(1-(np.cos(Q))**2)**(1/2)*(7*(np.cos(Q))**3-3*np.cos(Q)))**2*(jve(4+3/2,1j*k*r)/jve(4-1/2,1j*k*r)))
    return E_m


def U(rl,E,R):
    r_draht = 0.005
    U = 2*np.pi*rl*E
    I = U/R
    J = I/(np.pi*r_draht**2)
    return abs(J)

def Uwert(rl,E):
    U = 2*np.pi*rl*E
    return U

def Widerstand(rl,s):
    r_draht = 0.005
    R = 2*np.pi*rl/(np.pi*r_draht**2)*1/s
    return R


def Comp_Phy_Ex01():
    Ucomsol_Kugel_Homogennaeherung_Tiefe_sek = np.array([8.841705449623431-8.8826,8.84537071831512-8.8826,8.848796784336457-8.8826,8.851961934537275-8.8826,8.854860322560482-8.8826,8.857498428833697-8.8826,8.85988529479029-8.8826,8.862036607381587-8.8826,8.863971660965428-8.8826,8.865707904210154-8.8826,8.86726280031927-8.8826]) #Sekundärspannung Kugel entlang tiefe z 
    
    Ucomsol_tiefe_exakt_gesamt = np.array([0.0070525+26.355j,0.0056060+26.377j,0.0045594+26.393j,0.0037978+26.404j,0.0032459+26.412j,0.0028409+26.418j,0.0025424+26.422j,0.0023215+26.426j,0.0021562+26.428j,0.0020317+26.429j,0.0019377+26.430j])
    Ucomsol_tiefe_exakt_0 = np.array([0.0015945+26.438j,0.0015957+26.438j,0.0015952+26.438j,0.0015936+26.437j,0.0015949+26.437j,0.0015949+26.437j,0.0015948+26.437j,0.0015950+26.437j,0.0015950+26.436j,0.0015949+26.436j,0.0015951+26.435j])
    Ucomsol_tiefe_sekundaer = Ucomsol_tiefe_exakt_gesamt - Ucomsol_tiefe_exakt_0 #sekundäre exakte SIgnalspannung der Kugel tiefe z
   
    Ucomsol_x_mine_ges = np.array([0.0042932+16.918j,0.0050670+18.643j,0.0054122+19.794j,0.0061533+20.726j,0.0066140+21.542j,0.0070330+22.243j,0.0077846+22.848j,0.0081108+23.411j,0.0084698+23.903j,0.0088973+24.335j,0.0092689+24.722j,0.0097437+25.066j,0.010022+25.364j,0.010419+25.620j,0.010595+25.842j,0.010810+26.027j,0.010930+26.176j,0.011006+26.291j,0.011232+26.373j,0.011321+26.422j,0.011362+26.439j,0.011347+26.422j,0.011219+26.372j,0.011136+26.288j,0.010945+26.172j,0.010759+26.024j,0.010418+25.840j,0.010205+25.619j,0.0098582+25.363j,0.0095014+25.059j,0.0091815+24.720j,0.0087145+24.338j,0.0081982+23.897j,0.0079014+23.406j,0.0074544+22.855j,0.0068454+22.237j,0.0064216+21.531j,0.0057882+20.723j,0.0053652+19.787j,0.0047483+18.630j,0.0038332+16.911j])
    Ucomsol_x_mine_0 = np.array([0.0012674+16.919j,0.0013924+18.662j,0.0011884+19.827j,0.0013815+20.771j,0.0014112+21.597j,0.0013490+22.307j,0.0016421+22.922j,0.0015387+23.493j,0.0014493+23.992j,0.0014736+24.431j,0.0015044+24.825j,0.0016061+25.175j,0.0015379+25.477j,0.0016958+25.738j,0.0015675+25.963j,0.0015813+26.152j,0.0015909+26.304j,0.0015969+26.421j,0.0016019+26.505j,0.0016057+26.554j,0.0016096+26.571j,0.0016049+26.554j,0.0015587+26.504j,0.0015960+26.418j,0.0015704+26.300j,0.0015797+26.149j,0.0014849+25.961j,0.0015133+25.737j,0.0014584+25.477j,0.0014414+25.167j,0.0014988+24.822j,0.0013981+24.434j,0.0012602+23.986j,0.0014168+23.488j,0.0013788+22.928j,0.0012074+22.302j,0.0011745+21.586j,0.0010996+20.768j,0.0011918+19.820j,0.0011114+18.649j,8.6763E-4+16.911j])
    Ucomsol_x_mine_sekundaer = Ucomsol_x_mine_ges - Ucomsol_x_mine_0 #sekundäre exakte SIgnalspannung der Mine x richtung
    
    Ucomsol_Kugel_exakt_x_0 = np.array([0.0010313+18.601j,9.8915E-4+19.821j,0.0012473+20.711j,0.0012994+21.506j,0.0014725+22.164j,0.0013772+22.827j,0.0012971+23.514j,0.0014548+23.836j,0.0014670+24.288j,0.0014973+24.819j,0.0014977+25.001j,0.0015322+25.312j,0.0015469+25.611j,0.0015559+25.751j,0.0015740+26.058j,0.0015751+26.068j,0.0015913+26.321j,0.0016015+26.515j,0.0016015+26.509j,0.0015953+26.437j,0.0016015+26.509j,0.0016015+26.515j,0.0015913+26.321j,0.0015751+26.068j,0.0015740+26.058j,0.0015559+25.751j,0.0015469+25.611j,0.0015322+25.312j,0.0014977+25.001j,0.0014973+24.819j,0.0014670+24.288j,0.0014548+23.836j,0.0012971+23.514j,0.0013772+22.827j,0.0014725+22.164j,0.0012994+21.506j,0.0012473+20.711j,9.8915E-4+19.821j,0.0010313+18.601j,])
    Ucomsol_Kugel_exakt_x_ges = np.array([0.0031390+18.590j,0.0036789+19.793j,0.0044137+20.669j,0.0049252+21.451j,0.0055186+22.098j,0.0058426+22.750j,0.0061805+23.427j,0.0066499+23.741j,0.0069986+24.186j,0.0073701+24.709j,0.0076125+24.885j,0.0079001+25.191j,0.0081531+25.485j,0.0083352+25.621j,0.0085517+25.925j,0.0086497+25.932j,0.0088090+26.183j,0.0089238+26.374j,0.0089499+26.368j,0.0089290+26.297j,0.0089499+26.368j,0.0089238+26.374j,0.0088090+26.183j,0.0086497+25.932j,0.0085517+25.925j,0.0083352+25.621j,0.0081531+25.485j,0.0079001+25.191j,0.0076125+24.885j,0.0073701+24.709j,0.0069986+24.186j,0.0066499+23.741j,0.0061805+23.427j,0.0058426+22.750j,0.0055186+22.098j,0.0049252+21.451j,0.0044137+20.669j,0.0036789+19.793j,0.0031390+18.590j,])
    Ucomsol_Kugel_exakt_x_sek = Ucomsol_Kugel_exakt_x_ges- Ucomsol_Kugel_exakt_x_0 #sekundäre exakte SIgnalspannung der Kugel x richtung
    
    r = 0.03
    rl = 0.10
    z = np.linspace(0.1,0.2,100)
    
    z2 = [0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2]
    x = [-0.050000,-0.040000,-0.030000,-0.020000,-0.010000,0.0000,0.010000,0.020000,0.030000,0.040000,0.050000]
    x2 = [-0.10000,-0.095000,-0.090000,-0.085000,-0.080000,-0.075000,-0.070000,-0.065000,-0.060000,-0.055000,-0.050000,-0.045000,-0.040000,-0.035000,-0.030000,-0.025000,-0.020000,-0.015000,-0.010000,-0.0050000,0.0000,0.0050000,0.010000,0.015000,0.020000,0.025000,0.030000,0.035000,0.040000,0.045000,0.050000,0.055000,0.060000,0.065000,0.070000,0.075000,0.080000,0.085000,0.090000,0.095000,0.10000]
    x3 = [-0.095000,-0.090000,-0.085000,-0.080000,-0.075000,-0.070000,-0.065000,-0.060000,-0.055000,-0.050000,-0.045000,-0.040000,-0.035000,-0.030000,-0.025000,-0.020000,-0.015000,-0.010000,-0.0050000,0.0000,0.0050000,0.010000,0.015000,0.020000,0.025000,0.030000,0.035000,0.040000,0.045000,0.050000,0.055000,0.060000,0.065000,0.070000,0.075000,0.080000,0.085000,0.090000,0.095000]
    
    R = np.sqrt(rl**2+z**2)
    Q = np.arctan(rl/z)
    
    u = 4000
    u2 = 1.256e-6
    s = 1.12e7
    w = 2*np.pi*20000
    B1 = 0.0010057
    D1 = D(r,u,s,w)
    I = 9.33
    N = 100
    
    E2 = Dipol3(s,r,u,w,R,Q,B1,D1)
    E_exakt = Multipol4(s,u,w,u2,9.33*100,Q,r,R)

    U1 = Uwert(rl,E2)
    U3 = Uwert(0.15,Dipol3(s,r,u,w,np.sqrt(0.15**2+z**2),np.arctan(0.15/z),B1,D1))
    U_exakt = Uwert(rl,E_exakt)
    plt.rcParams["figure.figsize"] = (9,15)
    plt.xlabel('$x$-Position [m]')
    plt.ylabel('|$U_{Ges}$| [V]')

    plt.subplot(3, 1, 1)
    plt.plot(z,abs(U3.imag),'r')
    plt.plot(z2,abs(Ucomsol_Kugel_Homogennaeherung_Tiefe_sek),'s', label='COMSOL Ergebnisse')
   
    plt.subplot(3, 1, 2)
    plt.plot(z,abs(U1.imag),'r', label='analytische Dipollösung')
    plt.plot(z,abs(U_exakt.imag),'g', label='analytische Multipollösung')
    plt.plot(z2,abs(Ucomsol_tiefe_sekundaer.imag),'s', label='COMSOL Ergebnisse')
    

    plt.subplot(3, 1, 3)
    plt.plot(x2,abs(Ucomsol_x_mine_sekundaer.imag),'s', label='Mine')
    plt.plot(x3,abs(Ucomsol_Kugel_exakt_x_sek.imag),'s', label='Kugel')
    
    plt.legend()
    plt.show
    #plt.savefig('mine_vergleich_x_exakt.png')
Comp_Phy_Ex01()